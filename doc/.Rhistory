labs(x = NULL,
y = "Relative appearance after 'she' compared to 'he' in HPL's novels",
title = "Words paired with 'he' and 'she'") +
scale_color_discrete(name = "", labels = c("More 'she'", "More 'he'")) +
scale_y_continuous(breaks = seq(-3, 3),
labels = c("0.125x", "0.25x", "0.5x",
"Same", "2x", "4x", "8x"))
dev.off()
# MWS
MWS_word_ratios <- data_counts_by_author %>%
filter(author == "MWS") %>%
group_by(word2) %>%
filter(sum(counts) > 5) %>%
ungroup() %>%
spread(word1, counts, fill = 0) %>%
mutate_if(is.numeric, funs((. +1)/ sum(. +1))) %>%
mutate(logratio = log2(she / he)) %>%
arrange(desc(logratio)) %>%
mutate(abslogratio = abs(logratio)) %>%
group_by(logratio < 0) %>%
top_n(15,abslogratio) %>%
ungroup() %>%
mutate(word = reorder(word2, logratio))
jpeg("../figs/MWSverbs.jpeg", quality = 100)
ggplot(MWS_word_ratios, aes(word, logratio, color = logratio < 0)) +
geom_segment(aes(x=word, xend = word,
y = 0, yend = logratio),
size = 1.1, alpha = 0.6) +
geom_point(size = 3.5) +
coord_flip() +
labs(x = NULL,
y = "Relative appearance after 'she' compared to 'he' in MWS's novels",
title = "Words paired with 'he' and 'she'") +
scale_color_discrete(name = "", labels = c("More 'she'", "More 'he'")) +
scale_y_continuous(breaks = seq(-3, 3),
labels = c("0.125x", "0.25x", "0.5x",
"Same", "2x", "4x", "8x"))
dev.off()
gender <- data_counts_by_author %>%
spread(word1, counts, fill = 0)
temp_male <- gender %>%
spread(word2, he, fill = 0) %>%
group_by(author) %>%
summarise_if(is.numeric,sum) %>%
ungroup() %>%
rename(gender = "she") %>%
mutate(gender = "male")
temp_female <- gender %>%
spread(word2, she, fill = 0) %>%
group_by(author) %>%
summarise_if(is.numeric,sum) %>%
ungroup() %>%
rename(gender = "he") %>%
mutate(gender = "female")
gender <- rbind(temp_male, temp_female)
gender$author <- as.character(gender$author)
first_row <- c("","",rep("word", 1134) %>%
paste0(1:1134))
second_row <- c("", "", colnames(gender)[-c(1,2)])
gender <- rbind(first_row,second_row, gender) %>%
as.matrix()
colnames(gender) <- NULL
gender <- t(gender)
write.table(gender, "../data/pam.txt", sep = "\t", row.names = FALSE, col.names = FALSE)
gender.data <- pamr.from.excel("../data/pam.txt", ncols = 8, sample.labels = TRUE)
# train the model
gender.train <- pamr.train(gender.data)
gender.results <- pamr.cv(gender.train, gender.data)
pamr.plotcv(gender.results)
pamr.confusion(gender.results, threshold=1.8)
pamr.plotcvprob(gender.results, gender.data, threshold=1.8)
pamr.plotcen(gender.train, gender.data, threshold=1.8)
pamr.plotcv(gender.results)
library("xts")
# install.packages("dplyr")
library('dplyr') # data manipulation
# library('readr') # input/output
# library('data.table') # data manipulation
# install.packages('tibble')
library('tibble') # data wrangling
# library('tidyr') # data wrangling
# library('stringr') # string manipulation
# library('forcats') # factor manipulation
# install.packages('tidytext')
library('tidytext')
# install.packages("magrittr")
library('magrittr')
# install.packages("tidyr")
library("tidyr")
# install.packages("ggplot2")
library("ggplot2")
# install.packages("plotly")
library("plotly")
# install.packages("pamr")
library("pamr")
library(wordcloud)
source("../lib/multiplot.R")
# install.packages("gridExtra")
library("gridExtra")
# We want to treat each column as characters, not factors, except for the author column.
spooky <- read.csv('../data/spooky.csv', colClasses = 'character')
spooky <- as.tibble(spooky)
spooky$author <- as.factor(spooky$author)
summary(spooky)
# First use tidytext function to drop the punctuations and tokenize our file.
# We use bigrams because we want the word following the pronouns "he" and "she".
pronouns <- c("he","she")
data <- spooky %>%
unnest_tokens(word, text, token = "ngrams", n = 2, to_lower = TRUE, drop = TRUE)
data_counts <- data %>%
count(word, sort = TRUE) %>%
separate(word, c("word1","word2"), sep = " ", remove = TRUE) %>%
filter(word1 %in% pronouns) %>%
filter(word2 != "he") %>%
count(word1, word2, wt = n, sort = TRUE) %>%
rename(counts = "nn")
all_po <- data.frame(
count(data_counts, word1)
)
all_po <- all_po %>%
rename(counts = "n",
pronouns = "word1")
png("../figs/po1.png")
ggplot(all_po, aes(x="", y=counts, fill=pronouns))+
geom_bar(width = 1, stat = "identity")+
coord_polar("y", start = 0) +
ggtitle("pronoun occurence in total")
dev.off()
data_counts_by_author <- data %>%
count(author, word, sort = TRUE) %>%
separate(word, c("word1","word2"), sep = " ", remove = TRUE) %>%
filter(word1 %in% pronouns) %>%
filter(word2 != "he") %>%
rename(counts = "n")
MWS_po <- data_counts_by_author %>%
filter(author == "MWS") %>%
count(word1) %>%
rename(pronoun = "word1", counts = "n")
HPL_po <- data_counts_by_author %>%
filter(author == "HPL") %>%
count(word1) %>%
rename(pronoun = "word1", counts = "n")
EAP_po <- data_counts_by_author %>%
filter(author == "EAP") %>%
count(word1) %>%
rename(pronoun = "word1", counts = "n")
p1 <- ggplot(MWS_po, aes(x="", y=counts, fill=pronoun))+
geom_bar(width = 1, stat = "identity")+
coord_polar("y", start = 0) +
ggtitle("MWS pronoun occurence")
p2 <- ggplot(HPL_po, aes(x="", y=counts, fill=pronoun))+
geom_bar(width = 1, stat = "identity")+
coord_polar("y", start = 0) +
ggtitle("HPL pronoun occurence")
p3 <- ggplot(EAP_po, aes(x="", y=counts, fill=pronoun))+
geom_bar(width = 1, stat = "identity")+
coord_polar("y", start = 0) +
ggtitle("EAP pronoun occurence")
layout <- matrix(c(1,2,3), 3,1, byrow = TRUE)
png("../figs/po2.png")
multiplot(p1, p2, p3, layout = layout)
dev.off()
word_ratios <- data_counts %>%
group_by(word2) %>%
filter(sum(counts) > 10) %>%
ungroup() %>%
spread(word1, counts, fill = 0) %>%
mutate_if(is.numeric, funs((. + 1) / sum(. + 1))) %>%
mutate(logratio = log2(she / he)) %>%
arrange(desc(logratio))
# Equally likely:
equal <- word_ratios %>%
mutate(abslogratio = abs(logratio)) %>%
arrange(abslogratio)
words <- equal$word2
freqs <- equal$abslogratio
wordcloud(words, freqs, max.words = 14, min.freq = -0.25, scale = c(4,.5), vfont = c("sans serif","plain"), color = c("purple4", "red4", "black"))
# Large difference:
png("../figs/verbs1.png")
word_ratios %>%
mutate(abslogratio = abs(logratio)) %>%
group_by(logratio < 0) %>%
top_n(15, abslogratio) %>%
ungroup() %>%
mutate(word = reorder(word2, logratio)) %>%
ggplot(aes(word, logratio, color = logratio < 0)) +
geom_segment(aes(x = word, xend = word,
y = 0, yend = logratio),
size = 1.1, alpha = 0.6) +
geom_point(size = 3.5) +
coord_flip() +
labs(x = NULL,
y = "Relative appearance after 'she' compared to 'he'",
title = "Words paired with 'he' and 'she'",
subtitle = "Women throw, sleep, and turn while men####") +
scale_color_discrete(name = "", labels = c("More 'she'", "More 'he'")) +
scale_y_continuous(breaks = seq(-3, 3),
labels = c("0.125x", "0.25x", "0.5x",
"Same", "2x", "4x", "8x"))
dev.off()
# Separately:
# EAP
EAP_word_ratios <- data_counts_by_author %>%
filter(author == "EAP") %>%
group_by(word2) %>%
filter(sum(counts) > 5) %>%
ungroup() %>%
spread(word1, counts, fill = 0) %>%
mutate_if(is.numeric, funs((. +1)/ sum(. +1))) %>%
mutate(logratio = log2(she / he)) %>%
arrange(desc(logratio)) %>%
mutate(abslogratio = abs(logratio)) %>%
group_by(logratio < 0) %>%
top_n(15,abslogratio) %>%
ungroup() %>%
mutate(word = reorder(word2, logratio))
jpeg("../figs/EAPverbs.jpeg", quality = 100)
ggplot(EAP_word_ratios, aes(word, logratio, color = logratio < 0)) +
geom_segment(aes(x=word, xend = word,
y = 0, yend = logratio),
size = 1.1, alpha = 0.6) +
geom_point(size = 3.5) +
coord_flip() +
labs(x = NULL,
y = "Relative appearance after 'she' compared to 'he' in EAP's novels",
title = "Words paired with 'he' and 'she'") +
scale_color_discrete(name = "", labels = c("More 'she'", "More 'he'")) +
scale_y_continuous(breaks = seq(-3, 3),
labels = c("0.125x", "0.25x", "0.5x",
"Same", "2x", "4x", "8x"))
dev.off()
# HPL
HPL_word_ratios <- data_counts_by_author %>%
filter(author == "HPL") %>%
group_by(word2) %>%
filter(sum(counts) > 5) %>%
ungroup() %>%
spread(word1, counts, fill = 0) %>%
mutate_if(is.numeric, funs((. +1)/ sum(. +1))) %>%
mutate(logratio = log2(she / he)) %>%
arrange(desc(logratio)) %>%
mutate(abslogratio = abs(logratio)) %>%
group_by(logratio < 0) %>%
top_n(15,abslogratio) %>%
ungroup() %>%
mutate(word = reorder(word2, logratio))
jpeg("../figs/HPLverbs.jpeg", quality = 100)
ggplot(HPL_word_ratios, aes(word, logratio, color = logratio < 0)) +
geom_segment(aes(x=word, xend = word,
y = 0, yend = logratio),
size = 1.1, alpha = 0.6) +
geom_point(size = 3.5) +
coord_flip() +
labs(x = NULL,
y = "Relative appearance after 'she' compared to 'he' in HPL's novels",
title = "Words paired with 'he' and 'she'") +
scale_color_discrete(name = "", labels = c("More 'she'", "More 'he'")) +
scale_y_continuous(breaks = seq(-3, 3),
labels = c("0.125x", "0.25x", "0.5x",
"Same", "2x", "4x", "8x"))
dev.off()
# MWS
MWS_word_ratios <- data_counts_by_author %>%
filter(author == "MWS") %>%
group_by(word2) %>%
filter(sum(counts) > 5) %>%
ungroup() %>%
spread(word1, counts, fill = 0) %>%
mutate_if(is.numeric, funs((. +1)/ sum(. +1))) %>%
mutate(logratio = log2(she / he)) %>%
arrange(desc(logratio)) %>%
mutate(abslogratio = abs(logratio)) %>%
group_by(logratio < 0) %>%
top_n(15,abslogratio) %>%
ungroup() %>%
mutate(word = reorder(word2, logratio))
jpeg("../figs/MWSverbs.jpeg", quality = 100)
ggplot(MWS_word_ratios, aes(word, logratio, color = logratio < 0)) +
geom_segment(aes(x=word, xend = word,
y = 0, yend = logratio),
size = 1.1, alpha = 0.6) +
geom_point(size = 3.5) +
coord_flip() +
labs(x = NULL,
y = "Relative appearance after 'she' compared to 'he' in MWS's novels",
title = "Words paired with 'he' and 'she'") +
scale_color_discrete(name = "", labels = c("More 'she'", "More 'he'")) +
scale_y_continuous(breaks = seq(-3, 3),
labels = c("0.125x", "0.25x", "0.5x",
"Same", "2x", "4x", "8x"))
dev.off()
gender <- data_counts_by_author %>%
spread(word1, counts, fill = 0)
temp_male <- gender %>%
spread(word2, he, fill = 0) %>%
group_by(author) %>%
summarise_if(is.numeric,sum) %>%
ungroup() %>%
rename(gender = "she") %>%
mutate(gender = "male")
temp_female <- gender %>%
spread(word2, she, fill = 0) %>%
group_by(author) %>%
summarise_if(is.numeric,sum) %>%
ungroup() %>%
rename(gender = "he") %>%
mutate(gender = "female")
gender <- rbind(temp_male, temp_female)
gender$author <- as.character(gender$author)
first_row <- c("","",rep("word", 1134) %>%
paste0(1:1134))
second_row <- c("", "", colnames(gender)[-c(1,2)])
gender <- rbind(first_row,second_row, gender) %>%
as.matrix()
colnames(gender) <- NULL
gender <- t(gender)
# Draw a graph of the table to get an idea of how it looks like
temp <- tableGrob(head(gender))
grid.newpage()
png("../figs/data.png")
grid.draw(temp)
dev.off()
write.table(gender, "../data/pam.txt", sep = "\t", row.names = FALSE, col.names = FALSE)
gender.data <- pamr.from.excel("../data/pam.txt", ncols = 8, sample.labels = TRUE)
# train the model
gender.train <- pamr.train(gender.data)
gender.results <- pamr.cv(gender.train, gender.data)
## Plot the cross-validated error curves
png("../figs/cv.png")
pamr.plotcv(gender.results)
dev.off()
# ## Compute the confusion matrix for a particular model (threshold=7.0)
# pamr.confusion(gender.results, threshold=1.8)
#
# ## Plot the cross-validated class probabilities by class
# pamr.plotcvprob(gender.results, gender.data, threshold=1.8)
#
# ## Plot the class centroids
# # words that matters
# pamr.plotcen(gender.train, gender.data, threshold=1.8)
#
# ## Make a gene plot of the most significant genes
# pamr.geneplot(gender.train, gender.data, threshold=3)
pamr.confusion(gender.results, threshold=2.2)
pamr.plotcvprob(gender.results, gender.data, threshold=2.2)
png("../figs/cvprob.png")
pamr.plotcvprob(gender.results, gender.data, threshold=2.2)
dev.off()
pamr.plotcen(gender.train, gender.data, threshold=2.2)
png("../figs/plotcen.png")
pamr.plotcen(gender.train, gender.data, threshold=2.2)
dev.off()
pamr.geneplot(gender.train, gender.data, threshold=3)
pamr.geneplot(gender.train, gender.data, threshold=2.2)
pamr.geneplot(gender.train, gender.data, threshold=3)
pamr.plotcen(gender.results, gender.data, threshold=2.2)
pamr.listgenes(gender.result, gender.data, threshold = 2.2)
pamr.listgenes(gender.results, gender.data, threshold = 2.2)
pamr.listgenes(gender.train, gender.data, threshold = 2.2)
pamr.plotcen(gender.train, gender.data, threshold=2.2)
temp <- pamr.listgenes(gender.train, gender.data, threshold = 2.2)
temp <- pamr.listgenes(gender.train, gender.data, threshold = 2.2)
grid.newpage()
g1 <- grid.draw(temp)
temp <- pamr.listgenes(gender.train, gender.data, threshold = 2.2)
View(temp)
g1 <- grid.draw(temp)
temp <- tableGrob(pamr.listgenes(gender.train, gender.data, threshold = 2.2))
grid.newpage()
g1 <- grid.draw(temp)
g2 <- pamr.plotcen(gender.train, gender.data, threshold=2.2)
temp <- tableGrob(pamr.listgenes(gender.train, gender.data, threshold = 2.2))
grid.newpage()
g1 <- grid.draw(temp)
g2 <- pamr.plotcen(gender.train, gender.data, threshold=2.2)
layout <- matrix(c(1,2), 1,2, byrow = TRUE)
png("../figs/plotcen.png")
multiplot(g1,g2, layout = layout)
dev.off()
multiplot(g1,g2, layout = layout)
g1 <- grid.draw(temp)
temp <- tableGrob(pamr.listgenes(gender.train, gender.data, threshold = 2.2))
grid.newpage()
g1 <- grid.draw(temp)
g2 <- pamr.plotcen(gender.train, gender.data, threshold=2.2)
layout <- matrix(c(1,2), 1,2, byrow = TRUE)
png("../figs/plotcen.png")
multiplot(g1,g2, layout = layout)
dev.off()
temp <- tableGrob(pamr.listgenes(gender.train, gender.data, threshold = 2.2))
grid.newpage()
png("../figs/g1.png")
grid.draw(temp)
dev.off()
png("../figs/g2.png")
pamr.plotcen(gender.train, gender.data, threshold=2.2)
dev.off()
pamr.listgenes(gender.train, gender.data, threshold = 2.2)
gender$word92
gender["word92",]
View(gender)
gender %>%
filter(V1 = "word92")
View(gender)
data.frame(gender) %>%
filter(V1 = "word92")
data.frame(gender) %>%
filter(V1 == "word92")
View(gender)
gender <- data.frame(gender)
gender %>%
filter(V1 == "word92")
gender %>%
filter("V1" == "word92")
View(gender)
gender %>%
filter(X1 == "word92")
pamr.listgenes(gender.train, gender.data, threshold = 2.2)
ID <- pamr.listgenes(gender.train, gender.data, threshold = 2.2)$id
ID <- pamr.listgenes(gender.train, gender.data, threshold = 2.2)
View(ID)
ID <- pamr.listgenes(gender.train, gender.data, threshold = 2.2)[,1]
gender %>%
filter(X1 in ID)
gender %>%
filter(X1 %in% ID)
ID <- data.frame(pamr.listgenes(gender.train, gender.data, threshold = 2.2))
View(ID)
?arrange
View(ID)
ID %>%
arrange(id)
pamr.plotcen(gender.train, gender.data, threshold=2.2)
ID <- data.frame(pamr.listgenes(gender.train, gender.data, threshold = 2.2))
ID <- data.frame(pamr.listgenes(gender.train, gender.data, threshold = 2.2))[,3]
ID <- as.numeric(ID)
wordcloud(wordlist,ID)
wordlist <- c("word","who","read","would","held","took","came","seemed","was",
"yet","threatened","stretched","descended","bore","did","became",
"wished","drew","must","not","ceased","had","spoke","sat")
wordcloud(wordlist,ID)
pamr.plotcen(gender.train, gender.data, threshold=2.2)
wordlist <- c("said","who","read","would","held","took","came","seemed","was",
"yet","threatened","stretched","descended","bore","did","became",
"wished","drew","must","not","ceased","had","spoke","sat")
wordcloud(wordlist,ID)
?png
png("../figs/g1.png",width = 1000, height = 1000)
pamr.plotcen(gender.train, gender.data, threshold=2.2)
dev.off()
png("../figs/g1.png",width = 1000, height = 1000)
pamr.plotcen(gender.train, gender.data, threshold=2.2)
dev.off()
ID <- data.frame(pamr.listgenes(gender.train, gender.data, threshold = 2.2))[,3]
ID <- as.numeric(ID)
wordlist <- c("said","who","read","would","held","took","came","seemed","was",
"yet","threatened","stretched","descended","bore","did","became",
"wished","drew","must","not","ceased","had","spoke","sat")
wordcloud(wordlist,ID)
png("../figs/g1.png",width = 500, height = 1000)
pamr.plotcen(gender.train, gender.data, threshold=2.2)
dev.off()
png("../figs/cloud.png")
wordcloud(wordlist,ID)
dev.off()
wordcloud(wordlist,ID)
pamr.geneplot(gender.train, gender.data, threshold=3)
g1 <- pamr.plotcen(gender.train, gender.data, threshold=2.2)
g2 <- pamr.geneplot(gender.train, gender.data, threshold=3)
layout <- matrix(c(1,2), 1,2, byrow = TRUE)
png("../figs/g1.png",width = 1000, height = 1000)
multiplot(g1,g2, layout = layout)
dev.off()
layout <- matrix(c(1,2), 1,2, byrow = TRUE)
png("../figs/plotcen.png",width = 1000, height = 1000)
multiplot(g1,g2, layout = layout)
dev.off()
g1 <- pamr.plotcen(gender.train, gender.data, threshold=2.2)
g2 <- pamr.geneplot(gender.train, gender.data, threshold=3)
g1 <- pamr.plotcen(gender.train, gender.data, threshold=2.2)
pamr.plotcen(gender.train, gender.data, threshold=2.2)
png("../figs/plotcen.png")
png("../figs/plotcen.png")
g1 <- pamr.plotcen(gender.train, gender.data, threshold=2.2)
dev.off()
## Make a gene plot of the most significant genes
png("../figs/geneplot.png")
g2 <- pamr.geneplot(gender.train, gender.data, threshold=3)
dev.off()
png("../figs/plotcen.png")
pamr.plotcen(gender.train, gender.data, threshold=2.2)
dev.off()
## Make a gene plot of the most significant genes
png("../figs/geneplot.png")
pamr.geneplot(gender.train, gender.data, threshold=3)
dev.off()
png("../figs/geneplot.png")
pamr.geneplot(gender.train, gender.data, threshold=3)
dev.off()
View(equal)
wordcloud(words, freqs, max.words = 14, min.freq = -0.25, scale = c(4,.5), vfont = c("sans serif","plain"), color = c("purple4", "red4", "black"))
freqs <- seq_along(1,69)
freqs <- seq_along(69)
freqs <- seq(1,69)
freqs <- seq(69,1)
wordcloud(words, freqs, max.words = 30, vfont = c("sans serif","plain"), color = c("purple4", "red4", "black"))
png("..figs/eq.png")
wordcloud(words, freqs, max.words = 30, vfont = c("sans serif","plain"), color = c("purple4", "red4", "black"))
dev.off()
png("../figs/eq.png")
wordcloud(words, freqs, max.words = 30, vfont = c("sans serif","plain"), color = c("purple4", "red4", "black"))
dev.off()
